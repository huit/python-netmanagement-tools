#!/usr/bin/python

import os, sys
import argparse
import logging
import json

from ibconn import ibconn

def main():

    parser = argparse.ArgumentParser(description='Find information about dns zones',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog='''
Example: getzone -z huit.harvard.edu'''
                                     )
    
    parser.add_argument('--loglevel', dest='loglevel', type=str,
                        choices = ['DEBUG','INFO','WARNING','ERROR', 'CRITICAL'],
                        default = 'WARNING',
                        help='set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)')
    parser.add_argument('--ibconf', dest='conffile', type=str,
                        default = os.path.expanduser("~") + '/.ib.cfg',
                        help='infoblox library config file path')
    parser.add_argument('-v', dest='verbose', action="store_true",
                        help='verbose mode')
    parser.add_argument('-z', '--zone', dest='zone', type=str,
                        help='authoritative zone information')
    
    args = parser.parse_args()

    if not (args.zone):
        parser.error('No zone requested, -z required')

    zone = args.zone
    conffile = args.conffile
    loglevel = args.loglevel
    verbose = args.verbose

    if (loglevel == 'DEBUG' or verbose):
        logging.basicConfig(level=logging.DEBUG)

    ib = ibconn.ibconn(conffile)

    r = ib.get_zone_auth('fqdn', zone)
    logging.debug ('authoritative zone information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))

    r = ib.get_zone_delegated ('fqdn', zone)
    logging.debug ('delegated zone information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))

if __name__ == '__main__':
    sys.exit(main())
