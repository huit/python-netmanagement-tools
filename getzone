#!/usr/bin/python
import sys
import argparse
import logging

import ibquery
import netmriquery
import json

def main():

    parser = argparse.ArgumentParser(description='Find information about dns zones',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog='''
Example: getzone -z huit.harvard.edu'''
                                     )
    
    parser.add_argument('--loglevel', dest='loglevel', type=str,
                        choices = ['DEBUG','INFO','WARNING','ERROR', 'CRITICAL'],
                        default = 'WARNING',
                        help='set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)')
    parser.add_argument('-f' '-conffile', dest='conffile', type=str,
                        help='infoblox library config file path',
                        default = 'ib.cfg')
    parser.add_argument('-v', dest='verbose', action="store_true",
                        help='verbose mode')
    parser.add_argument('-z', '--zone', dest='zone', type=str,
                        help='authoritative zone information')
    
    args = parser.parse_args()

    zone = args.zone
    conffile = args.conffile
    loglevel = args.loglevel
    verbose = args.verbose
    if (loglevel == 'DEBUG' or verbose):
        logging.basicConfig(level=logging.DEBUG)

    ib = ibquery.InfobloxConn(conffile)
    netmri = netmriquery.NetMRIConn('netmri.cfg')

    r = ib.get_zone_auth('fqdn', zone)
    logging.debug ('authoritative zone information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))

    r = ib.get_zone_delegated ('fqdn', zone)
    logging.debug ('delegated zone information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))

if __name__ == '__main__':
    sys.exit(main())
