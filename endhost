#!/usr/bin/python

import os, sys
import json
import argparse
import logging

from netmriconn import netmriconn

def main():

    parser = argparse.ArgumentParser(description='Find information about end hosts',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog='''
only one of either -m or -i should be specified
Example: endhost -m 11:22:33:aa:bb:cc
Example: endhost -i 128.103.209.90'''
                                     )
    
    parser.add_argument('--loglevel', dest='loglevel', type=str,
                        choices = ['DEBUG','INFO','WARNING','ERROR', 'CRITICAL'],
                        default = 'WARNING',
                        help='set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)')
    devicein = parser.add_mutually_exclusive_group()
    devicein.add_argument('-i', '--ip', dest='ipaddr', type=str,
                        help='end host ip address')
    devicein.add_argument('-m', '--macaddr', dest='macaddr', type=str,
                        help='end host mac address')
    parser.add_argument('--netmriconf', dest='conffile', type=str,
                        default = os.path.expanduser("~") + '/.netmri.cfg',
                        help='netmriconn config file')
    args = parser.parse_args()

    if not (args.ipaddr or args.macaddr):
        parser.error('No device information provided, one of -i or -m required')
    conffile = args.conffile
    ipaddr = args.ipaddr
    loglevel = args.loglevel
    macaddr = args.macaddr

    if loglevel == 'DEBUG':
        logging.basicConfig(level=logging.DEBUG)

    netmri = netmriconn.netmriconn(conffile)

    if macaddr is not None:
        r = netmri.get_endhost_lastseen('MACAddress', macaddr)
    else:
        r = netmri.get_endhost_lastseen('IPAddress', ipaddr)

    if r is not None:
        
        logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))
        logging.debug (r['NeighborID'])
        d = netmri.get_neighbordevice('NeighborID', str(r['NeighborID']))

        logging.debug (json.dumps(d, separators=(',',':'), sort_keys=True, indent=4))

        try:
            e = d['neighbors'].pop()
        except:
            print ('no neighbor found, mac/ip appears to be disconnected from the network')
            sys.exit(1)

        f = netmri.get_device('DeviceID', str(e['DeviceID']))
        f = f['devices'].pop()
        logging.debug (json.dumps(f, separators=(',',':'), sort_keys=True, indent=4))
        print (f['DeviceSysName'])

        f = netmri.get_interface('InterfaceID', str(e['InterfaceID']))
        f = f['interfaces'].pop()
        logging.debug (json.dumps(f, separators=(',',':'), sort_keys=True, indent=4))
        print (f['ifName'])
          

    else:

        print 'end host not found'

if __name__ == '__main__':
    sys.exit(main())
