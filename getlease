#!/usr/bin/python

import os, sys
import argparse
import logging
import json

netmripath=os.path.abspath('../python-netmriconn')
sys.path.append(netmripath)
import netmriconn

ibpath=os.path.abspath('../python-ibconn')
sys.path.append(ibpath)
import ibconn

def main():

    parser = argparse.ArgumentParser(description='Find information about dhcp leases',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog='''
Example: getlease -i 128.103.209.90'''
                                     )
    
    parser.add_argument('--loglevel', dest='loglevel', type=str,
                        choices = ['DEBUG','INFO','WARNING','ERROR', 'CRITICAL'],
                        default = 'WARNING',
                        help='set logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)')
    parser.add_argument('-i', '--ip', dest='ipaddr', type=str,
                        help='end host ip address')
    parser.add_argument('-ibconf', dest='ibconf', type=str,
                        help='infoblox library config file path',
                        default = 'ib.cfg')
    parser.add_argument('-netmriconf', dest='netmriconf', type=str,
                        help='netmri library config file path',
                        default = 'netmri.cfg')

    args = parser.parse_args()
    if not (args.ipaddr):
        parser.error('No ip address provided, -i <ipaddr> is required')

    ipaddr = args.ipaddr
    loglevel = args.loglevel
    ibconf = args.ibconf
    netmriconf = args.netmriconf
    if loglevel == 'DEBUG':
        logging.basicConfig(level=logging.DEBUG)

    ib = ibconn.ibconn(ibconf)
    netmri = netmriconn.netmriconn(netmriconf)

    r = ib.get_lease ('address', ipaddr, 10000)
    logging.debug ('dhcp lease information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))
#    for i in r:
#        if i.has_key('discovered_data'):
#            netdev = i['discovered_data']
#            print netdev['network_component_name'] + ',' + netdev['network_component_port_name'] + ',',
#            print netdev['network_component_port_description'] + ',' + netdev['port_vlan_name'] + ',' + str(netdev['port_vlan_number'])
#        else:
#            print #need to clear to newline...

    r = ib.get_fixedaddress ('ipv4addr', ipaddr, 10000)
    logging.debug ('fixedaddress information')
    logging.debug (json.dumps(r, separators=(',',':'), sort_keys=True, indent=4))
#    for i in r:
#        print 'fixed,' + i['ipv4addr'] + ',' + i['mac'] +',',
#        if i.has_key('discovered_data'):
#            netdev = i['discovered_data']
#            print netdev['network_component_name'] + ',' + netdev['network_component_port_name'] + ',',
#            print netdev['network_component_port_description'] + ',' + netdev['port_vlan_name'] + ',' + str(netdev['port_vlan_number'])
#        else:
#            print #need to clear to newline....

if __name__ == '__main__':
    sys.exit(main())
